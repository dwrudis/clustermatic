<!-- $Id: vmad.sgml,v 1.3 2001/03/20 00:38:31 mkdist Exp $ -->
<!-- WARNING: THIS DOCUMENTATION IS SOMEWHAT OUT OF DATE -->
<!doctype linuxdoc system>
<article>

<!-- Title information -->

<title>VMADump
<author>Erik Hendriks <tt>
   <htmlurl url="mailto:erik@hendriks.cx" name="erik@hendriks.cx"></tt>
<date>5 April 2000
<abstract>
VMADump is a kernel module which allows a process to dump its state to
file and also restore process state from a file.  VMADump is short for
Virtual Memory Area Dumper.  Process state includes the entire memory
space (including shared libraries, etc.), processor state and signal
handler state.  Open files, shared memory segments and SysV IPC are
not restored after an undump.
</abstract>

<!-- Table of contents -->
<toc>

<!-- Begin the document -->
<sect>Introduction

<p>VMADump is a kernel module which allows a process to dump its state
to or from a file descriptor.  VMADump is short for Virtual Memory
Area Dumper.  It will read or write to pipes, sockets, etc. as well as
ordinary files.  VMADump currently supports the x86, alpha and sparc
architectures.

<p>Features:
<itemize>
<item>Supports Linux 2.2.x

<item>Buildable as a loadable kernel module.  No kernel modifications
      required.

<item>Supports x86, alpha and sparc32

<item>Regions mmapped from files (such as shared libraries and the
      executable) can be stored as file references to reduce dump
      size.

<item>Dumps can be written to and read from any file descriptor
      supporting read() and write().  You can easily dump and undump
      from the network, pipes, etc.

</itemize>

<p>This module was written to support process migration for the BPROC
distributed process space.

<sect>Downloading

<p>
VMAdump is available on the web at the following location


<sect1>Redistribution
<p>
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
<p>
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
<p>
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


<!-- ------------------------------------------------------------- -->
<sect>Technical Description
<!-- ------------------------------------------------------------- -->
<p>VMADump is a kernel module distributed with bproc which will dump a
process's state to or from a file descriptor.  VMADump is short for
Virtual Memory Area Dumper.  It will read or write to pipes, sockets,
etc. as well as ordinary files.  These functions are used internally
by bproc to move processes around.  The saved state includes:

<sect1>Dumping memory regions.

<p>Every process consists of a number of virtual memory areas.  (See
/proc/&lt;pid&gt;/maps to see an example.)  VMADump stores the data in
all these regions in the dump file.  The combined size of these
regions is often surprisingly large.  Programs which are only a few
kilobytes in size can easily have memory spaces larger than a megabyte
due to size of shared libraries that mapped in.

<p>A space saving feature that VMADump provides is the ability to omit
the data for a memory region if that data happens to be mapped from a
file.

<p>File mapped memory regions fall into three categories.

<descrip>
<tag/Executable/These regions are mapped from the executable image for
the program that is running.

<tag/Library/These regions ara mapped from shared libraries.  VMADump
has a list of file which are treated as shared libraries.

<tag/Other/Any file map which is not Executable or Library.
</descrip>

<p>VMADump's default behavior is to store file references wherever
possible.  This behavior can be altered with the flags argument to
suit your needs.

<p>VMADump understands the following flags:
<descrip>
<tag/VMAD_DUMP_EXEC/Dump region contents (not file references) for
regions that fall into the Executable category.

<tag/VMAD_DUMP_LIBS/Dump region contents (not file references) for
regions that fall into the Library category.

<tag/VMAD_DUMP_OTHER/Dump region contents (not file references) for
regions that fall into the Other category.

<tag/VMAD_DUMP_ALL/This is the logical OR of the previous three flags.
VMAD_DUMP_ALL will cause the

</descrip>

<p>Any combination of these flags may be combined with a logical OR.

<p>A common example would be that you know the libraries will be
available on the machine where you plan to undump but the executable
image will not be.  In that case you would probably want to dump 



<itemize>

<item>All the processes memory regions.  The data for all writable
regions is saved.  Read-only regions that are mmap'ed from files
(i.e. glibc code) can be stored as file references to reduce the size
of dumps.

<item>Other information about memory mmap'ed regions like where the
bss and stack sections begin.  (This allows stacks to grow and setbrk
(malloc) to work after restoring the memory space.)

<item>The process's registers including FPU state.

<item>The process's signal handler state.

</itemize>

<!-- ------------------------------------------------------------- -->
<sect>C Library Interface
<!-- ------------------------------------------------------------- -->

<p>The following interface is provided for vmadump in libbproc:

<descrip>
<tag/int bproc_vmadump(int fd, int flags)/This takes the current process
and dumps it to the file <tt/fd/.  It returns the number of bytes
written to fd.  When the process is undumped, this function will
return 0.  The flags argument determines what memory regions will have
their data dumped and which ones will be stored as file references.
Writable memory regions are never stored as file references.

<descrip>

<tag/VMAD_DUMP_LIBS/If given, read only mmaps from files in /lib and
/usr/lib will not be stored as file references.

<tag/VMAD_DUMP_EXEC/If given, read only mmaps from the executable file
will not be stored as file references.

<tag/VMAD_DUMP_OTHER/If given, other read only mmaps not falling into
the categories above will not be stored as file references.

<tag/VMAD_DUMP_ALL/If given, no read only mmaps will be stored as file
references.  This is the safest option if in doubt.  This is the
logical OR of the other flags.

</descrip>

<p>
The return value from bproc_vmadump() is the number of bytes written
to fd if successful and -1 on failure.  When a process is undumped
again, it will wake up and return from this function.  In that case
the return value will be zero.

<tag/int bproc_vmaundump(int fd)/This attempts to undump an image from fd.
This function is not very error tolerant.  If something goes wrong
half way through undumping, it will return with a half-undumped
process.  If successful, the current process is replaced with the
image from the dump.  (much like exec)

</descrip>

<!-- ------------------------------------------------------------- -->
<sect>VMADump File format
<!-- ------------------------------------------------------------- -->

<p><bf>WARNING:  This is subject to change and may not be 100% up to date.</bf>

<p>The overall dump format has the following sections

<itemize>
<item>VMADump file signature
<item>Architecture/kernel version info
<item>One or more VM area info structs (with data)
<item>Saved Registers
<item>Additional Memory Space info
<item>Program name
<item>Other Saved Process state (signal handlers, etc)
</itemize>

The layout of these file regions is architecture specific except for
the signature, architecture and kernel information.  All definitions
specific to VMADump can be found in &lt;linux/vmadump.h&gt;.  The
VMADump also uses some internal Linux definitions for saving things
like CPU register information.  These structure definitions are all
defined in the Linux kernel.

<sect1>VMADump dump header

<p>Every dump begins with the following header.  This header is the
same on all architectures.  This is the only section of the file that
is architecture independent.

<code>
struct vmadump_header {
    unsigned char magic[4];
    unsigned char arch;
    unsigned char major;
    unsigned char minor;
    unsigned char patch;
};
</code>

<descrip>
<tag/magic/The magic field should contain the string "VMAD"
(0x56,0x4d,0x41,0x44).

<tag/arch/This indicates which architecture the dump was created on.
The architecture numbers are defined in &lt;linux/vmadump.h&gt; as
VMAD_ARCH_<em/arch/.

<tag/major/This is the major kernel revision that the dump was created on.
<tag/minor/This is the minor kernel revision that the dump was created on.
<tag/patch/This is the patch level of the kernel that the dump was created on.
</descrip>


<sect1>VM areas

<p>Information about and data for the process's virtual memory (VM)
areas are stored next.  Every process has a collection of memory
regions that make up a process's memory space.  (To see a list of
these regions for a process, look in <tt>/proc/&lt;pid&gt;/maps</tt>.
Every line in that file represents one VM area.  Together, these
regions make up the process's memory space.)

<p>These regions are stored as a sequence of <tt/struct
vmadump_vma_header/'s.  Each header is followed by data for that
region.  Normally, a region header is followed by the data that that
region contained.  This can lead to rather large dumps even for
trivial programs since a program's regions will often contain a copy
of the dynamic linker program, the C library and other libraries.
VMADump allows the user to save regions that are read-only and mapped
from a file to be saved as a reference back to that file.  In that
case the filename that the region was mapped from follows the
<tt/struct vmadump_vma_header/ instead of the data in the region.
There is no trailing null stored with the filename.

<code>
struct vmadump_vma_header {
    unsigned long  start;
    unsigned long  end;
    unsigned short flags;
    unsigned short namelen;	/* 0 = data follows */
    unsigned long  offset;	/* file offset for mmap */
};
</code>

<descrip>
<tag/start,end/These are the start and end addresses of the memory region.

<tag/flags/These are the flags for the region as defined for
<tt/struct vm_area_struct/ in the Linux kernel.

<tag/namelen/If the data for the memory region follows the header,
this field will be zero.  Otherwise, it is the length of the filename
that follows the region header.

<tag/offset/The file offset for file references.  This field is
ignored if the data for a region is supplied.

</descrip>

<p>
The list of VM areas is terminated by a header where <tt/start/ and
<tt/end/ are both set to all 1's.  (&tilde;0L)

<sect1>CPU Registers

<p>The format of CPU register storage is completely architecture dependent.

<descrip>
<tag/i386/On the x86, the general purpose registers are stored in a
<tt/struct pt_regs/ which is defined in <tt>&lt;asm/ptrace.h&gt;</tt>.
This is followed by the FPU state which is stored in a <tt/union
i387_union/ which is defined in <tt>&lt;asm/processor.h&gt;</tt>

<tag/alpha/On the alpha, the general purpose registers are stored in a
<tt/struct pt_regs/.  This is followed by a <tt/struct switch_stack/
which includes general purpose registers not included in <tt/struct
pt_regs/ as well as the floating point registers.  Both of these
structures defined in <tt>&lt;asm/ptrace.h&gt;</tt>.

<tag/sparc/On the sparc, only a <tt/struct pt_regs/ is stored.  FPU
state is not yet saved on this arch.
</descrip>

<sect1>Additional Memory Space Information

<p>Next in the dump file is a <tt/struct vmadump_mm_info/ which
contains the information the kernel needs to allow a restored process
to do things like grow the stack and allocate more memory via
<tt/sbrk(2)/.

<code>
struct vmadump_mm_info {
    unsigned long start_code, end_code;
    unsigned long start_data, end_data;
    unsigned long start_brk,  brk;
    unsigned long start_stack;
    unsigned long arg_start, arg_end;
    unsigned long env_start, env_end;
};
</code>

<sect1> Program name

<p>The program name is stored next.  This is the program name that is
stored in the Linux <tt/task_struct/ and has nothing to do with the
process's <tt/argv[0]/.  This is stored as a 16 byte string copied
directly out of the process's task_struct.

<sect1> Signal handler information

<p>First the blocked signals are stored as a <tt/sigset_t/.  These are
followed by a list of <tt/struct k_sigaction/ for each signal.  Those
contain the pointers to the process's signal handlers.

<sect>Known bugs / problems

<p>
<descrip>

<tag>Error recovery on VMADump's undump is poor/noexistent</tag> When
   undumping, the first thing VMADump does is throw out the old memory
   space.  This is to allow building the new memory space using the
   normal memory management calls.  (It's non-trivial to have another
   memory space lying around.)  Error half way through undumping will
   likely just cause the process to segfault.e
</descrip>
</article>
